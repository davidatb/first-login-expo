{"ast":null,"code":"import { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nlet rawManifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\nconst {\n  name,\n  appOwnership,\n  ...nativeConstants\n} = ExponentConstants || {};\nlet warnedAboutManifestField = false;\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null\n};\nObject.defineProperties(constants, {\n  installationId: {\n    get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest2: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  manifest: {\n    get() {\n      if (__DEV__ && !warnedAboutManifestField) {\n        console.warn(`Constants.manifest has been deprecated in favor of Constants.expoConfig.`);\n        warnedAboutManifestField = true;\n      }\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  manifest2: {\n    get() {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  expoConfig: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  expoGoConfig: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  easConfig: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  __rawManifest_TEST: {\n    get() {\n      return rawManifest;\n    },\n    set(value) {\n      rawManifest = value;\n    },\n    enumerable: false\n  }\n});\nfunction isAppManifest(manifest) {\n  return !isManifest(manifest);\n}\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\nfunction getManifest(suppressWarning = false) {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);\n    }\n  }\n  return rawManifest;\n}\nexport default constants;","map":{"version":3,"names":["CodedError","NativeModulesProxy","Platform","NativeModules","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","rawManifest","ExpoUpdates","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","EXDevLauncher","devLauncherManifest","name","appOwnership","nativeConstants","warnedAboutManifestField","constants","defineProperties","installationId","get","enumerable","__unsafeNoWarnManifest","maybeManifest","getManifest","isAppManifest","__unsafeNoWarnManifest2","isManifest","__DEV__","manifest2","expoConfig","extra","expoClient","expoGoConfig","expoGo","easConfig","eas","__rawManifest_TEST","set","value","suppressWarning","invalidManifestType","executionEnvironment","Bare","OS","StoreClient","Standalone"],"sources":["C:\\Users\\david\\Desktop\\my-app\\node_modules\\expo-constants\\src\\Constants.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  EASConfig,\n  ExecutionEnvironment,\n  ExpoGoConfig,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutManifestField = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  installationId: {\n    get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false,\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): AppManifest | Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): AppManifest | null {\n      if (__DEV__ && !warnedAboutManifestField) {\n        console.warn(`Constants.manifest has been deprecated in favor of Constants.expoConfig.`);\n        warnedAboutManifestField = true;\n      }\n\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  expoConfig: {\n    get():\n      | (ExpoConfig & {\n          /**\n           * Only present during development using @expo/cli.\n           */\n          hostUri?: string;\n        })\n      | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  expoGoConfig: {\n    get(): ExpoGoConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  easConfig: {\n    get(): EASConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): AppManifest | Manifest | null {\n      return rawManifest;\n    },\n    set(value: AppManifest | Manifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}