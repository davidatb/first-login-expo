{"ast":null,"code":"import NativeModulesProxy from './NativeModulesProxy';\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule(moduleName) {\n  const nativeModule = globalThis.expo?.modules?.[moduleName] ?? globalThis.ExpoModules?.[moduleName] ?? NativeModulesProxy[moduleName];\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}","map":{"version":3,"names":["NativeModulesProxy","requireNativeModule","moduleName","nativeModule","globalThis","expo","modules","ExpoModules","Error"],"sources":["C:\\Users\\david\\Desktop\\my-app\\node_modules\\expo-modules-core\\src\\requireNativeModule.ts"],"sourcesContent":["import NativeModulesProxy from './NativeModulesProxy';\n\ntype ExpoObject = {\n  modules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n};\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var expo: ExpoObject | undefined;\n\n  /**\n   * @deprecated `global.ExpoModules` is deprecated, use `global.expo.modules` instead.\n   */\n  // eslint-disable-next-line no-var\n  var ExpoModules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n}\n\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule<ModuleType = any>(moduleName: string): ModuleType {\n  const nativeModule: ModuleType =\n    globalThis.expo?.modules?.[moduleName] ??\n    globalThis.ExpoModules?.[moduleName] ??\n    NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}\n"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,sBAAsB;AAyBrD;;;;;;;;;AASA,OAAM,SAAUC,mBAAmBA,CAAmBC,UAAkB;EACtE,MAAMC,YAAY,GAChBC,UAAU,CAACC,IAAI,EAAEC,OAAO,GAAGJ,UAAU,CAAC,IACtCE,UAAU,CAACG,WAAW,GAAGL,UAAU,CAAC,IACpCF,kBAAkB,CAACE,UAAU,CAAC;EAEhC,IAAI,CAACC,YAAY,EAAE;IACjB,MAAM,IAAIK,KAAK,CAAC,8BAA8BN,UAAU,GAAG,CAAC;;EAE9D,OAAOC,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}